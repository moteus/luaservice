J = path.join

LUA_NEED = 'lua'

-- DYNAMIC  = true

DEFINES  = {
  'USE_LUA_ALLOCATOR',
  -- 'NO_DEBUG_TRACEBACK',
  -- 'USE_ONLY_MALLOC',
  -- 'LOG_ALLOCATIONS',
}

src = c.group{
  base    = 'src';
  src     = '*';
  defines = DEFINES;
  needs   = LUA_NEED;
  dynamic = DYNAMIC;
}

res = wresource.group{
  base  = 'src';
  src   = '*';
}


LuaService = c.program{'LuaService';
  base    = 'src';
  inputs  = {src,res};
  defines = DEFINES;
  needs   = LUA_NEED;
  dynamic = DYNAMIC;
  libs    = {'advapi32'};
  odir    = J('..' , 'Release');
}

INSTALL_DIR = 'ship'

ship = target('ship', {
  file.group{odir=INSTALL_DIR;                src = LuaService  };
  file.group{odir=INSTALL_DIR;                src = 'Readme.txt'};
  file.group{odir=J(INSTALL_DIR, 'doc');      src = J('doc', '*.*')};
  file.group{odir=J(INSTALL_DIR, 'examples'); src = J('Samples', '*.*'); recurse = true};
})

target('7z', ship, function()
  print('make LuaService.zip')
  if not TESTING then
    lake.chdir('ship')
    os.execute('7z a -r -tzip ../LuaService.zip')
    lake.chdir('<')
  end
end)

