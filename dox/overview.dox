/*!
\mainpage LuaService Overview

This project provides a framework for building Windows Service applications 
in Lua. A Windows Service is a special application that runs at system boot
(or on demand) without an interactive user. One use case is to run Xavante 
automatically.

This project is hosted at LuaForge (http://www.luaforge.net/) as 
http://luaforge.net/projects/luaservice/ where full source code, 
documentation, a bug tracker, and so forth can be found.

- See \ref lsusage for a description of how to set up a service with LuaService.
- See \ref flow for discussion of the general event flow in a service.
- See \ref luamodel for discussion of how Lua fits in the framework.
- See \ref building for notes on building LuaService and its documentation
from source.
- See \ref tools for some notes on the software tools used.
- LuaService is open source and licensed under the MIT license as is Lua 
itself. See \ref license for details. 

Note that LuaService assumes that lua5.1.dll from the Lua Binaries 
(http://luaforge.net/projects/luabinaries/) distribution is located 
somewhere that the LocalSystem account can find it. The best way to 
guarantee this is true is to put a copy of lua5.1.dll in the same 
folder as LuaService.exe.

LuaService has been tested against both Lua 5.1.1 and Lua 5.1.2. The 
latter is preferred.

*/

/*! \page building Building LuaService

To build LuaService from source, you will need many of the tools listed
in \ref tools, particularly MinGW and Eclipse including the CDT. In 
particular, the project does not currently supply either a conventional 
Makefile or a Visual Studio workspace or project.

\section bldService Building LuaService.exe

I have found it convenient to use Eclipse to check the project out from 
the CVS repository at LuaForge, which gets you an Eclipse project in your
workspace. With that project loaded, Project|Clean and Project|Build All 
will get you a complete build of your default configuration.

Package Release\LuaService.exe along with a copy of lua5.1.dll and your
custom init.lua and the service's Lua implementation in a single folder.
Run <tt>LuaService -i</tt> at a command prompt in your service's folder
to install the service in in the SCM's database and start it. 

\section bldDocs Building the Documentation

To build the documentation, you need to install doxygen, dot, and msggen
at a minimum. With these tools installed, the HTML documentation pages 
can be build by running <tt>doxygen LuaService.doxyfile</tt> at a command
prompt in the LuaService workspace folder. To make documentation builds
easier, I recommend adding the Eclox plugin to your Eclipse installation.
It adds a custom editor for doxyfiles, and adds a toolbar button that 
runs doxygen in your workspace.

By default, the HTML output is configured to prepare the HTML for collection
into a Windows HTML Help file named LuaService.chm. That can only happen if
you have the HTML Help Workshop installed, and confirm that the setting for
\c HHC_LOCATION in \c LuaService.doxyfile correctly names your installed
copy of the HTML Help Compiler HHC.EXE. If that isn't possible, change
that setting to have no value and doxygen will stop trying to run the 
compiler for you. If you have the HTML Help Workshop, the compiled CHM
file will be written to \c doc\\LuaService.chm. Either way, \c doc\\html\\index.html
will be the root of the HTML documentation set.

To build the PDF document from LaTeX sources under Windows, you will need
a LaTeX installation. I have found MiKTeX to be suitable. You also need 
to post-process the .tex files written by doxygen to correct some small
issues with their LaTeX usage, especially if you let the Eclipse installer
locate your workspace folder in the default location on Windows XP 
(<tt>C:\\Documents and Settings\\<i>user</i>\\workspace\\</tt>) because 
some of the .tex files include references to other files that include the
full path name without proper quotation of the spaces. A Perl script found
in <tt>...\\workspace\\LuaScript\\fixlatex.plx</tt> makes a temporary copy of
LuaService.doxyfile with only the latex output enabled, runs doxygen, 
edits the generated .tex files, rewrites the latex Makefile to be more 
consistent with MinGW usage at a command prompt, runs make in the latex 
folder, and copies the resulting pdf to doc\\LuaService.pdf.



*/

/*! \page tools Supporting Tools

Most of these tools aren't mandatory (well, aside from a compiler of some
sort that does produce native Win32 binaries without too many wierd DLL 
dependancies), but they make my life easier during lots of development 
projects.

- Eclipse platform and IDE, and especially the Eclipse CDT:
See http://www.eclipse.org, http://www.eclipse.org/cdt

- Eclox, a Doxygen frontend plugin for Eclipse.
Visit http://home.gna.org/eclox/

- Doxygen, a documentation tool for C-like languages.
Found at http://www.doxygen.org/

- Graphviz Dot, a directed acyclic graph visualization tool used by 
Doxygen to draw structure and relationship figures. This is a great 
tool for visualizing arbitrary complex network diagrams since it works
from a natural text format describing the nodes and connecting arcs to 
produce neatly drawn figures. Find it at http://www.graphviz.org/

- MSCGen, a Message Sequence Chart generator that integrates well with
Doxygen. Find it at http://www.mcternan.me.uk/mscgen/ and put it in your 
path so that the \@msc and \@endmsc directives work.

- MiKTeX, the premier distribution of TeX and LaTeX for Windows. Find it 
at http://miktex.org/. To keep doxygen happy, you probably want to run
its package browser and locate and install the optional fancyheader 
package.

- LuaEclipse, an integrated development environment for the 
Lua programming language. http://luaeclipse.luaforge.net/

- The Lua programming language: http://www.lua.org/

- CVS (http://www.nongnu.org/cvs/) and CVSNT (http://www.cvsnt.org/)
The latter is more useful on Windows machines, but beware of its 
insidiously useful improvements over real CVS, like the cvs ls command
and the cvs status -qq command. Once you get used to status having
the -qq option as a quick and dirty way to find out what is different
in your sandbox, it is really difficult to go back to the real thing.
Eclipse's native CVS browsing helps there, however.

- PuTTY, an SSH implementation for Windows:
http://www.chiark.greenend.org.uk/~sgtatham/putty/

- Diceware at http://www.diceware.org/ for a good treatment of proper pass phrase
generation and management. Look here if you want to be seriously paranoid
about private key safety.

- MinGW, minimalist GNU for Windows: http://www.mingw.org/ 

- MSDN is the source of all knowledge of official Windows API and workings.

- DebugView, ProcessMonitor, and ProcessExplorer are invaluable for finding 
out what is really going on inside a running Windows machine without stepping 
off the deep end of full kernel debuggin. A serious Windows developer must 
have these and often other utilities from Sysinternals, now found at Microsoft:
http://www.microsoft.com/technet/sysinternals/

- SC.EXE, a generic service control utility for developers. This is part of the 
Windows Platform SDK tools, but may be present on modern windows systems. Try a 
command like <code>sc /?</code> to see if you have it installed already. Some 
useful incantations include:
  - <code>sc help</code> Documentation. Also see the technote in MSDN titled 
<b><a href="http://msdn2.microsoft.com/en-us/library/ms810435.aspx" 
target="_top" title="MSDN">Using SC.EXE to Develop Windows NT Services</a></b> 
for hints and tips.
  - <code>sc create LuaService binPath= "c:\full\path\of\LuaService.exe"</code> 
Note the space after "binPath=" and the file name. All of sc create's options have 
that same form, with the option name including the equals character, and using 
the next command line argument as the value. Don't forget to quote the pathname
if it includes any spaces.
  - <code>sc start LuaService</code> Tell the SCM to start the service.
  - <code>sc stop LuaService</code> Tell the SCM to stop the service.
  
*/

/*! \page license License

Copyright (c) 2007, Ross Berteig and Cheshire Engineering Corp.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
